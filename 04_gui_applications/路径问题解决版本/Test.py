
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

class TargetMeasurementGUI:
    def __init__(self):
        self.OUTPUT_PATH = Path(__file__).parent
        self.ASSETS_PATH = self.OUTPUT_PATH / Path("assets/frame0")
        
        # 定义标志位flag，初始值为0
        self.flag = 0
        
        # 定义显示变量，可以在外部修改
        self.Done = "王"
        self.Dtwo = "俊" 
        self.Dthree = "智"
        self.xone = "是"
        self.xtwo = "笨"
        self.xthree = "蛋"
        
        # GUI组件
        self.window = None
        self.canvas = None
        self.button_1 = None
        self.button_image_1 = None
        
        # 文本对象ID，用于更新显示
        self.text_ids = {}

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def button_clicked(self):
        """按钮点击事件处理"""
        self.flag = 1
     #   print("Hello,World!")

    def create_gui(self):
        """创建GUI界面"""
        self.window = Tk()
        self.window.geometry("1232x794")
        self.window.configure(bg="#101824")

        self.canvas = Canvas(
            self.window,
            bg="#101824",
            height=794,
            width=1232,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        self.canvas.place(x=0, y=0)
        
        # 创建标题
        self.canvas.create_text(
            227.0,
            64.0,
            anchor="nw",
            text="基于单目视觉的目标物测量装置",
            fill="#F3F3F3",
            font=("Inter Bold", 40 * -1)
        )

        # 创建按钮
        self.button_image_1 = PhotoImage(
            file=self.relative_to_assets("button_1.png"))
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.button_clicked,
            relief="flat"
        )
        self.button_1.place(
            x=981.0,
            y=67.0,
            width=116.0,
            height=96.0
        )

        # 创建矩形背景
        self.canvas.create_rectangle(
            176.0, 202.0, 1069.0, 282.0,
            fill="#6E3BFF", outline="")

        self.canvas.create_rectangle(
            176.0, 643.0, 1069.0, 723.0,
            fill="#261568", outline="")

        self.canvas.create_rectangle(
            176.0, 496.0, 1069.0, 576.0,
            fill="#341B7D", outline="")

        self.canvas.create_rectangle(
            176.0, 349.0, 1069.0, 429.0,
            fill="#4A28A9", outline="")

        # 创建固定文本
        self.canvas.create_text(
            272.0, 214.0,
            anchor="nw",
            text="目标物",
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.canvas.create_text(
            846.0, 214.0,
            anchor="nw",
            text="x",
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.canvas.create_text(
            549.0, 214.0,
            anchor="nw",
            text="D",
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.canvas.create_text(
            284.0, 363.0,
            anchor="nw",
            text="1",
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.canvas.create_text(
            284.0, 657.0,
            anchor="nw",
            text="3",
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.canvas.create_text(
            284.0, 510.0,
            anchor="nw",
            text="2",
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        # 创建可变的文本对象并保存ID
        self.text_ids['Done'] = self.canvas.create_text(
            540.0, 362.0,
            anchor="nw",
            text=self.Done,
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.text_ids['Dtwo'] = self.canvas.create_text(
            540.0, 509.0,
            anchor="nw",
            text=self.Dtwo,
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.text_ids['Dthree'] = self.canvas.create_text(
            540.0, 656.0,
            anchor="nw",
            text=self.Dthree,
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.text_ids['xone'] = self.canvas.create_text(
            840.0, 362.0,
            anchor="nw",
            text=self.xone,
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.text_ids['xtwo'] = self.canvas.create_text(
            840.0, 510.0,
            anchor="nw",
            text=self.xtwo,
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.text_ids['xthree'] = self.canvas.create_text(
            840.0, 656.0,
            anchor="nw",
            text=self.xthree,
            fill="#FFFFFF",
            font=("Inter", 36 * -1)
        )

        self.window.resizable(False, False)

    def update_text(self, text_name, new_value):
        """更新指定文本的显示内容"""
        if text_name in self.text_ids and hasattr(self, text_name):
            setattr(self, text_name, new_value)
            self.canvas.itemconfig(self.text_ids[text_name], text=new_value)

    def update_all_texts(self, **kwargs):
        """批量更新文本内容"""
        for text_name, new_value in kwargs.items():
            self.update_text(text_name, new_value)

    def get_flag(self):
        """获取按钮点击标志"""
        return self.flag

    def reset_flag(self):
        """重置按钮点击标志"""
        self.flag = 0

    def run(self):
        """运行GUI主循环"""
        if self.window:
            self.window.mainloop()

    def destroy(self):
        """销毁GUI窗口"""
        if self.window:
            self.window.destroy()

# 为了向后兼容，保留原有的全局函数
def relative_to_assets(path: str) -> Path:
    return Path(__file__).parent / Path("assets/frame0") / Path(path)

# 示例使用
if __name__ == "__main__":
    # 创建GUI实例
    gui = TargetMeasurementGUI()
    
    # 创建界面
    gui.create_gui()
    
    
    